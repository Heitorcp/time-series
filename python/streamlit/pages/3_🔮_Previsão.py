import streamlit as st
import functions.backend.sessionState as sessionState
import functions.utils.columns as columns
import functions.frontend.sidebar as sidebar
import functions.frontend.diagnostico.differentiation as differentiation
import functions.frontend.analise.lineChart as lineChart
import functions.frontend.previsao.models as models
import functions.frontend.previsao.residuals as residuals
from scipy.stats import jarque_bera
from statsmodels.stats.diagnostic import acorr_ljungbox
from statsmodels.tsa.stattools import breakvar_heteroskedasticity_test

# Texto superior na p√°gina
st.markdown("# Modelos e Previs√µes" )

# Vari√°vel de estado que vamos usar nessa p√°gina
sessionState.using_state(['downloaded_data'])

# Mostra a sidebar
filtered_df = sidebar.get_sidebar(diagnostico=True, cumulative=False) #nao usar dados cumulativos para previsao

textWarning = """
Aqui, exploramos an√°lises preditivas dos dados da COVID-19. Combinando t√©cnicas avan√ßadas de s√©ries temporais, o trabalho permite que os usu√°rios interajam com o modelo, escolhendo vari√°veis espec√≠ficas para entender a evolu√ß√£o da pandemia.
Esta abordagem din√¢mica real√ßa a flexibilidade e precis√£o dos modelos preditivos em antecipar tend√™ncias de sa√∫de p√∫blica, enfatizando a import√¢ncia da an√°lise de dados e tecnologia no contexto de uma crise de sa√∫de global.
"""
if sessionState.get_state('downloaded_data') is not True:
    st.markdown(textWarning)
    st.warning("Fa√ßa o download dos dados antes de continuar")
elif sessionState.get_state('filter_lv') is None:
    st.markdown(textWarning)
    st.warning("Selecione os filtros antes de continuar")
elif sessionState.get_state('window') is None:
    st.markdown(textWarning)
    st.warning('Selecione uma janela de tempo adequada')
elif filtered_df is None or filtered_df.empty:
    st.markdown(textWarning)
    st.warning("N√£o h√° dados para serem analisados")
else:

    filtered_df = filtered_df.rename(columns=columns.getVariableTranslationDict())
    col_1_1, col_1_2 = st.columns(2)

    with col_1_1:

        # Define as variaveis que ser√£o usadas para treinar o modelo
        variablesSelected = st.selectbox(
        "Selecione a vari√°vel que deseja modelar",
        options = columns.getVariableTranslationList(columns.getColumnGroups('variaveis'))
                )
        variablesKeys = columns.getVariableKeyList(variablesSelected)

        lineChart.draw(filtered_df, [variablesSelected], legend=None, title=f"S√©rie Original - {variablesSelected}")

    with col_1_2:
        #Filtro de transforma√ß√£o
        filtered_df_stationary = filtered_df.copy()
        stationarity_time_series = differentiation.transformation_picker(filtered_df[variablesSelected]).to_frame()
        filtered_df_stationary[variablesSelected] = stationarity_time_series[variablesSelected]
        lineChart.draw(filtered_df_stationary, [variablesSelected], legend=None, title=f"S√©rie Transformada - {variablesSelected}")

    st.markdown("## Modelagem")

    col_2_1, col_2_2 = st.columns(2)

    with col_2_1:
        #Filtro de divisao de dados em treino e teste
        proportion = st.number_input("Defina a propor√ß√£o entre Treino e Teste", format="%d", min_value = 1, max_value = 99, value  = 80)
        train_size = int((proportion/100)*len(filtered_df))
        train, test = filtered_df[:train_size], filtered_df[train_size:]

    with col_2_2:
        # Filtro de selecao de modelos
        model_names = ["Autoregressivo", "Autoregressivo - Busca Autom√°tica", "M√©dias M√≥veis","ARMA", "ARIMA", "ARIMA - Busca Autom√°tica (AutoARIMA)", "SARIMA"]
        automatic_models = ["Autoregressivo - Busca Autom√°tica", "ARIMA - Busca Autom√°tica (AutoARIMA)"]
        params_models = ["Autoregressivo", "M√©dias M√≥veis", "ARIMA", "SARIMA"]

        model_selected = st.selectbox("Qual modelo voc√™ deseja utilizar?", model_names)

    st.markdown(f"### Modelo {model_selected.title()}")

    # Parametros que os modelos utilizam
    dict_params = {"Autoregressivo":["lags"],
                   "M√©dias M√≥veis":["q"],
                   "ARMA":["p", "q"],
                   "ARIMA":["p", "d", "q"],
                   "SARIMA":["p", "d", "q", "s"]}

    #Modelos
    models_functions = {
        "Autoregressivo": (models.AutoRegressiveModel),
        "Autoregressivo - Busca Autom√°tica": (models.AutoRegressiveModel, {"lags":None, "max_lags":20}),
        "M√©dias M√≥veis": models.MovingAverageModel,
        "ARMA": models.ARMAModel,
        "ARIMA": (models.ARIMAModel, {"auto":False}),
        "ARIMA - Busca Autom√°tica (AutoARIMA)": (models.ARIMAModel, {"auto":True}),
        "SARIMA": models.SARIMAModel
    }


    #Seleciona parametros do modelos nao-automaticos
    if model_selected in dict_params:
        params_name = dict_params[model_selected]

        actual_params = {}
        for param in params_name:
            actual_params[param] = st.number_input(f"Parametro {param}", format = "%f")

    try:
        #Modelos Automaticos
        if model_selected in automatic_models:
            #Seleciona Seleciona parametros do modelos automaticos
            selected_function, automatic_args = models_functions[model_selected]
            #Caso especial AutoARIMA
            if model_selected == "ARIMA - Busca Autom√°tica (AutoARIMA)":
                model_fit, forecast_values, conf_int, resids, model_order = selected_function(train = train[variablesSelected].fillna(0), steps=len(test), **automatic_args)
            else:
                model_fit, forecast_values, conf_int, resids = selected_function(train = train[variablesSelected].fillna(0), steps=len(test), **automatic_args)

            #Plotando os Resultados
            models.plot_test_data_forecast(test[variablesSelected], forecasts = forecast_values, conf_int = conf_int)

        else:
            selected_function = models_functions[model_selected]
            model_fit, forecast_values, conf_int, resids = selected_function(train=train[variablesSelected].fillna(0),
                                                                        steps=len(test), **actual_params)

            #Plotando os Resultados
            models.plot_test_data_forecast(test[variablesSelected], forecasts = forecast_values, conf_int = conf_int)

        #Diagn√≥stico dos Res√≠duos
        st.markdown("## An√°lise dos Res√≠duos üîé")

        #Gr√°fico de Diagn√≥stico dos Res√≠duos
        residuals.residual_analysis(resids)

        # #Testes dos residuos
        residuals.residuals_tests(model_selected, model_fit, resids)
    except Exception as e:
        st.error(f"Erro na modelagem: {e}")