import streamlit as st 
import pandas as pd
import functions.backend.sessionState as sessionState
import functions.frontend.sidebar as sidebar
import functions.utils.columns as columns 
import functions.frontend.analise.lineChart as lineChart
import functions.frontend.diagnostico.windowing as windowSeries
import functions.frontend.diagnostico.decomposition as decomposition
import functions.frontend.diagnostico.autocorrelation as autocorrelation

# Vari√°vel de estado que vamos usar nessa p√°gina
sessionState.using_state(['downloaded_data'])

# Mostra a sidebar
filtered_df = sidebar.get_sidebar(diagnostico=True)

#PAGE STARTS HERE
st.markdown("# Diagn√≥sticos dos dados" ) 

#DATAFRAME PLACEHOLDER 
with st.expander("üìà Tabela com os dados"):
    dataframe_placeholder = st.empty()
    # dataframe_placeholder.dataframe(filtered_df)


textWarning = """Nesta se√ß√£o, √© poss√≠vel realizar um estudo de diagn√≥stico da s√©rie selecionada. Desse modo, √© poss√≠vel realizar a decomposi√ß√£o da s√©rie em suas componentes de Tend√™ncia, Sazonalidade e Ru√≠do.\n
Al√©m disso tamb√©m √© disponibilizado o correlograma da s√©rie para estudos de poss√≠veis modelos preditivos. """

if sessionState.get_state('downloaded_data') is not True:
    st.markdown(textWarning)
    st.warning("Fa√ßa o download dos dados antes de continuar")
elif sessionState.get_state('filter_lv') is None:
    st.markdown(textWarning)
    st.warning("Selecione os filtros antes de continuar")

else:
    locations = sidebar.get_locations()
    locations_str = ', '.join([location.split('-')[1] if '-' in location else location for location in locations])
    st.markdown(f"### {locations_str}")

    st.warning("Selecione apenas **uma vari√°vel** por vez")

    defaultVariables = ['deaths']
    variablesSelected = st.multiselect(
        "Selecione as vari√°veis que deseja analisar",
        options = columns.getVariableTranslationList(columns.getColumnGroups('serie_temporal')),
        default = columns.getVariableTranslationList(defaultVariables)
    )

    # Espa√ßador
    st.text("")

    variablesKeys = columns.getVariableKeyList(variablesSelected)

    st.markdown("### Gr√°fico de Linha")
    lineChartDf = filtered_df.copy()

    print(lineChartDf.dtypes)

    lineChartDf = lineChartDf.rename(columns=columns.getVariableTranslationDict())

    lineChart.draw(lineChartDf, variablesSelected)

    #Definindo janela de tempo
    window = sidebar.get_window_time()
    decomposition_model = sidebar.get_decomposition_model()
    windowedDf = windowSeries.resample_time_series(lineChartDf, value_column=variablesSelected, time_window=window, time_column='Data') 
   
   #Plotando a s√©rie decomposta
    st.markdown("## Decompondo a S√©rie Temporal")
    lag = sidebar.get_differentiation_lag() 
    decomposition.filter_and_plot_decomposition(windowedDf, lags=lag, model=decomposition_model) 

    #Plotando a Autocorrelacao 
    st.markdown("## Autocorrela√ß√£o") 
    autocorrelation.plot_autocorrelation(windowedDf)
    
