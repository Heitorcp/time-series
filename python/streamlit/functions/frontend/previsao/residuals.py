import pandas as pd
import streamlit as st
import seaborn as sns
import matplotlib.pyplot as plt
from statsmodels.graphics.gofplots import qqplot 
from statsmodels.graphics.tsaplots import plot_acf
from scipy.stats import jarque_bera 
from statsmodels.stats.diagnostic import acorr_ljungbox
from statsmodels.tsa.stattools import breakvar_heteroskedasticity_test

def residual_analysis(residual:pd.Series):

    fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(13,6.5))

    # plot[1,1]
    residual.plot(ax=axs[0,0])
    axs[0,0].set_title("Res√≠duos");

    # plot
    sns.distplot(residual, ax=axs[0,1]);
    axs[0,1].set_title("Densidade - Res√≠duos");

    # # plot
    qqplot(residual, line='q', fit=True, ax=axs[1,0])
    axs[1,0].set_title('Q-Q Plot ')

    # plot
    plot_acf(residual,  lags=35, ax=axs[1,1],color="fuchsia", auto_ylims=True)
    axs[1,1].set_title("Autocorrela√ß√£o");

    st.pyplot(fig) 

def residuals_tests(model_selected, model_fit, resids):
    st.markdown("## Testes üß™")
    if 'Autoregressivo' not in model_selected:
        # Aplicar o Teste de Jarque-Bera
        if(callable(model_fit.resid)):
            residuos = model_fit.resid()
        else:
            residuos = model_fit.resid
    else:
        residuos = resids
    estatistica, p_valor = jarque_bera(residuos)
    st.markdown("### Teste de Jarque-Bera - Normalidade dos Res√≠duos")
    # Exibir os resultados
    st.markdown(f"**Estat√≠stica do teste de Jarque-Bera:** {str(estatistica)}")
    st.markdown(f"**Valor p:** {str(p_valor)}")
    # Testar a hip√≥tese nula de que os res√≠duos t√™m uma distribui√ß√£o normal
    if p_valor > 0.05:
        st.success("Os res√≠duos parecem seguir uma distribui√ß√£o normal (n√£o podemos rejeitar a hip√≥tese nula)", icon="‚úÖ")
    else:
        st.warning("Os res√≠duos n√£o seguem uma distribui√ß√£o normal (rejeitamos a hip√≥tese nula)", icon="‚ö†Ô∏è")

    # Aplicar o teste de LjungBox para independ√™ncia dos res√≠duos
    df = acorr_ljungbox(residuos, lags=10).rename(columns={'lb_stat':'Estatisticas','lb_pvalue':'P-Valores'})
    # Exibir os resultados
    st.markdown("### Teste de Ljung-Box - Autocorrela√ß√£o Serial")
    st.markdown('#### Estat√≠sticas e P-Valores associados ao teste de Ljung-Box')
    st.dataframe(df.transpose())
    # Testar a hip√≥tese nula de independ√™ncia dos res√≠duos
    if any(df['P-Valores'] < 0.05):
        st.warning("Os res√≠duos n√£o s√£o independentes (rejeitamos a hip√≥tese nula)", icon="‚ö†Ô∏è")
    else:
        st.success("Os res√≠duos s√£o independentes (n√£o podemos rejeitar a hip√≥tese nula)", icon="‚úÖ") 

    # Aplicar o teste de homocedaticidade dos res√≠duos 
    st.markdown("### Teste de Homocedasticidade dos Res√≠duos")
    estatistica, p_valor = breakvar_heteroskedasticity_test(residuos)
    # Exibir os resultados
    st.markdown(f"**Estat√≠stica do teste de homocedasticidade:** {str(estatistica)}")
    st.markdown(f"**Valor p:** {str(p_valor)}")
    # Testar a hip√≥tese nula de que os res√≠duos t√™m uma distribui√ß√£o normal
    if p_valor > 0.05:
        st.success("Os res√≠duos parecem ser homoced√°sticos (n√£o podemos rejeitar a hip√≥tese nula)", icon="‚úÖ")
    else:
        st.warning("Os res√≠duos s√£o heteroced√°sticos (rejeitamos a hip√≥tese nula)", icon="‚ö†Ô∏è")